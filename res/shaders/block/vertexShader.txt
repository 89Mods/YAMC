#version 330 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;
in int light;

out vec2 pass_textureCoords;
out vec3 pass_lightLevel;
out float isSelected;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 transformationMatrix;
uniform vec3 selectedPosition;
uniform float sunlightStrength;
uniform vec3 sunColor;

const float ambientLightLevel = 1.0 / 15.0;

void main(void){
	
	if(position.x >= selectedPosition.x -1 && position.x <= selectedPosition.x + 1 && position.y >= selectedPosition.y - 1 && position.y <= selectedPosition.y + 1 && position.z >= selectedPosition.z - 1 && position.z <= selectedPosition.z + 1) isSelected = 1.0;
	else isSelected = 0.0;
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	
	float torchlight = (light & 15) / 15.0;
	float sunlightMul = ((light >> 4) & 15) / 15.0 - (1.0 - sunlightStrength / 15.0);
	vec3 finalLight = vec3(max(torchlight, sunlightMul * sunColor.r), max(torchlight, sunlightMul * sunColor.g), max(torchlight, sunlightMul * sunColor.b));
	
	gl_Position = projectionMatrix * viewMatrix * worldPosition;
	pass_textureCoords = textureCoords;
	pass_lightLevel = clamp(finalLight, ambientLightLevel, 1.1);
}